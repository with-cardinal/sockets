const WebSocket = require("ws");
const Redis = require("ioredis");
const url = require("url");
const uniq = require("lodash/uniq");

function log(msg) {
  console.log(JSON.stringify({ at: new Date(), ...msg }));
}

const socketServer = new WebSocket.Server({
  port: process.env.PORT
});

let clients = {};
let subs = {};

// on process exit, close all connections
process.on("EXIT", () => {
  Object.values(clients).forEach(({ client }) => {
    client.close();
  });
});

function subscribe(channel, clientId) {
  subs[channel] = uniq([...(subs[channel] || []), clientId]);
}

function unsubscribe(channel, clientId) {
  subs[channel] = (subs[channel] || []).filter(id => id !== clientId);
}

function send(channel, msgString) {
  const clientIds = subs[channel];

  if (clientIds) {
    clientIds.forEach(clientId => {
      if (clients[clientId]) {
        clients[clientId].client.send(msgString);
      } else {
        unsubscribe(channel, clientId);
      }
    });
  }
}

const redis = new Redis(process.env.REDIS_URL);
redis.subscribe("socket-broadcast");

// when redis receives a message on socket-broadcast
redis.on("message", async (channel, message) => {
  const splitAt = message.indexOf(":");
  if (splitAt === -1) {
    log({
      event: "invalidRedisMessage",
      message
    });
    return;
  }

  const msgOp = message.slice(0, 1);
  const msgChannel = message.slice(1, splitAt);
  const msgString = message.slice(splitAt + 1);

  if (msgOp === "0") {
    log({event: "subscribe", msgChannel, msgString});
    subscribe(msgChannel, msgString);
  } else if (msgOp === "1") {
    log({event: "unsubscribe", msgChannel, msgString});
    unsubscribe(msgChannel, msgString);
  } else if (msgOp === "2") {
    log({event: "send", msgChannel});
    send(msgChannel, msgString);
  }
});

// handle server clients
socketServer.on("connection", async function (client, request) {
  const parsedUrl = url.parse(request.url, true);
  const id = parsedUrl.query.id;
  const ip = request.connection.remoteAddress;

  log({ event: "socketConnect", id });

  if (!id) {
    log({ event: "noClientId" });
    client.terminate();
    return;
  }

  if (clients[id]) {
    log({ event: "duplicateClient", id });
    client.terminate();
    return;
  }

  clients[id] = { client, ip };
  client.on("close", async () => {
    log({ event: "socketClose", id });

    delete clients[id];
  });

  // error and disconnect if the client sends a message
  client.on("message", async message => {
    log({ event: "messageReceived", id });
    client.terminate();
  });
});
