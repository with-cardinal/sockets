#!/usr/bin/env node
const WebSocket = require("ws");
const Redis = require("ioredis");

import State from "../state";
import log from "../log";

let port = process.env.PORT || 3003;
let redisUrl = process.env.REDIS_URL || "redis://localhost:6379";
let checkInterval = process.env.CHECK_INTERVAL || 10000;

const socketServer = new WebSocket.Server({
  port,
});

let state = new State();

// on process exit, close all connections
process.on("EXIT", () => {
  log({ event: "serverShutdown" });
  state.disconnectAll();
});

const redis = new Redis(redisUrl);
redis.subscribe("socket-broadcast");

// when redis receives a message on socket-broadcast
redis.on("message", async (channel, message) => {
  const splitAt = message.indexOf(":");
  if (splitAt === -1) {
    log({
      event: "invalidRedisMessage",
      message,
    });
    return;
  }

  const msgOp = message.slice(0, 1);
  const msgChannel = message.slice(1, splitAt);
  const msgString = message.slice(splitAt + 1);

  if (msgOp === "0") {
    log({ event: "subscribe", msgChannel, msgString });
    state.subscribe(msgChannel, msgString);
  } else if (msgOp === "1") {
    log({ event: "unsubscribe", msgChannel, msgString });
    state.unsubscribe(msgChannel, msgString);
  } else if (msgOp === "2") {
    log({ event: "send", msgChannel });
    state.send(msgChannel, msgString);
  } else if (msgOp === "3") {
    log({ event: "unsubscribeSubscribedTo", msgChannel, msgString });
    state.unsubscribeSubscribedTo(msgChannel, msgString);
  } else if (msgOp === "4") {
    log({ event: "disconnectSubscribedTo", msgChannel });
    state.disconnectSubscribedTo(msgChannel);
  }
});

// handle server clients
socketServer.on("connection", async function (client, request) {
  const parsedUrl = new URL(request.url);
  const ip = request.connection.remoteAddress;
  const id = parsedUrl.query.id;

  log({ event: "socketConnect", id });

  const timeout = setInterval(() => state.checkSubs(id), checkInterval);
  state.connect(id, client, ip, timeout);

  // send the id to the client over the socket
  client.send(JSON.stringify({ connect: id }));

  client.on("close", async () => {
    log({ event: "socketClose", id });

    clearInterval(timeout);
    state.removeClient(id);
  });

  // error and disconnect if the client sends a message
  client.on("message", async () => {
    log({ event: "messageReceived", id });
    client.terminate();
  });
});

log({ event: "serverStart", port, checkInterval });
